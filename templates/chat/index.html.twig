{% extends 'base.html.twig' %}

{% block title %}Chat - Sortir.com{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .chat-container {
            height: 80vh;
            border: 1px solid #dee2e6;
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 0 20px rgba(0,0,0,0.1);
        }
        
        .chat-header {
            background: linear-gradient(135deg, #8f00ff, #7300cc);
            color: white;
            padding: 15px 20px;
            font-weight: 600;
        }
        
        .chat-messages {
            height: calc(100% - 140px);
            overflow-y: auto;
            padding: 20px;
            background-color: #f8f9fa;
        }
        
        .message {
            margin-bottom: 15px;
            display: flex;
            align-items: flex-start;
        }
        
        .message.own {
            flex-direction: row-reverse;
        }
        
        .message-content {
            max-width: 70%;
            padding: 12px 16px;
            border-radius: 18px;
            word-wrap: break-word;
        }
        
        .message.own .message-content {
            background: linear-gradient(135deg, #8f00ff, #7300cc);
            color: white;
            border-bottom-right-radius: 4px;
        }
        
        .message:not(.own) .message-content {
            background: white;
            color: #333;
            border: 1px solid #e9ecef;
            border-bottom-left-radius: 4px;
        }
        
        .message-info {
            font-size: 0.8em;
            margin-top: 5px;
            opacity: 0.7;
        }
        
        .message.own .message-info {
            text-align: right;
        }
        
        .chat-input-container {
            padding: 20px;
            background: white;
            border-top: 1px solid #dee2e6;
        }
        
        .chat-input {
            border: 2px solid #e9ecef;
            border-radius: 25px;
            padding: 12px 20px;
            width: 100%;
            transition: border-color 0.3s ease;
        }
        
        .chat-input:focus {
            outline: none;
            border-color: #8f00ff;
        }
        
        .send-btn {
            background: linear-gradient(135deg, #8f00ff, #7300cc);
            border: none;
            color: white;
            padding: 12px 25px;
            border-radius: 25px;
            margin-left: 10px;
            transition: all 0.3s ease;
        }
        
        .send-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(143, 0, 255, 0.3);
        }
        
        .typing-indicator {
            padding: 10px 20px;
            font-style: italic;
            color: #6c757d;
            font-size: 0.9em;
        }
        
        .online-indicator {
            display: inline-block;
            width: 8px;
            height: 8px;
            background-color: #28a745;
            border-radius: 50%;
            margin-right: 8px;
        }
        
        .notification-badge {
            position: absolute;
            top: -5px;
            right: -5px;
            background-color: #dc3545;
            color: white;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            font-size: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
        }
    </style>
{% endblock %}

{% block body %}
<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="chat-container">
                <div class="chat-header">
                    <i class="fas fa-comments me-2"></i>
                    Chat en direct
                    <span class="online-indicator"></span>
                    <small class="ms-2">En ligne</small>
                </div>
                
                <div class="chat-messages" id="chatMessages">
                    {% for message in messages %}
                        <div class="message {% if message.expediteur.id == app.user.id %}own{% endif %}">
                            <div class="message-content">
                                <div class="message-text">{{ message.contenu }}</div>
                                <div class="message-info">
                                    {% if message.expediteur.id == app.user.id %}
                                        Vous
                                    {% else %}
                                        {{ message.expediteur.prenom }} {{ message.expediteur.nom }}
                                    {% endif %}
                                    - {{ message.dateEnvoi|date('H:i') }}
                                </div>
                            </div>
                        </div>
                    {% endfor %}
                </div>
                
                <div class="typing-indicator" id="typingIndicator" style="display: none;">
                    <em>Quelqu'un tape...</em>
                </div>
                
                <div class="chat-input-container">
                    <div class="d-flex">
                        <input type="text" 
                               class="chat-input" 
                               id="messageInput" 
                               placeholder="Tapez votre message..."
                               maxlength="500">
                        <button class="send-btn" id="sendBtn">
                            <i class="fas fa-paper-plane"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        class ChatManager {
            constructor() {
                this.ws = null;
                this.messageInput = document.getElementById('messageInput');
                this.sendBtn = document.getElementById('sendBtn');
                this.chatMessages = document.getElementById('chatMessages');
                this.typingIndicator = document.getElementById('typingIndicator');
                this.typingTimeout = null;
                this.userId = {{ app.user.id }};
                this.userName = '{{ app.user.prenom }}';
                
                this.init();
            }
            
            init() {
                this.connectWebSocket();
                this.bindEvents();
                this.scrollToBottom();
            }
            
            connectWebSocket() {
                this.ws = new WebSocket('ws://localhost:8080');
                
                this.ws.onopen = () => {
                    console.log('Connecté au chat');
                };
                
                this.ws.onmessage = (event) => {
                    const data = JSON.parse(event.data);
                    this.handleWebSocketMessage(data);
                };
                
                this.ws.onclose = () => {
                    console.log('Déconnecté du chat');
                    // Tentative de reconnexion après 3 secondes
                    setTimeout(() => this.connectWebSocket(), 3000);
                };
                
                this.ws.onerror = (error) => {
                    console.error('Erreur WebSocket:', error);
                };
            }
            
            bindEvents() {
                this.sendBtn.addEventListener('click', () => this.sendMessage());
                this.messageInput.addEventListener('keypress', (e) => {
                    if (e.key === 'Enter') {
                        this.sendMessage();
                    }
                });
                
                this.messageInput.addEventListener('input', () => {
                    this.sendTypingStatus(true);
                    clearTimeout(this.typingTimeout);
                    this.typingTimeout = setTimeout(() => {
                        this.sendTypingStatus(false);
                    }, 1000);
                });
            }
            
            sendMessage() {
                const content = this.messageInput.value.trim();
                if (!content) return;
                
                if (this.ws && this.ws.readyState === WebSocket.OPEN) {
                    this.ws.send(JSON.stringify({
                        type: 'message',
                        content: content,
                        userId: this.userId
                    }));
                }
                
                this.messageInput.value = '';
                this.sendTypingStatus(false);
            }
            
            sendTypingStatus(isTyping) {
                if (this.ws && this.ws.readyState === WebSocket.OPEN) {
                    this.ws.send(JSON.stringify({
                        type: 'typing',
                        userId: this.userId,
                        isTyping: isTyping
                    }));
                }
            }
            
            handleWebSocketMessage(data) {
                switch (data.type) {
                    case 'message':
                        this.addMessage(data);
                        break;
                    case 'typing':
                        this.handleTypingIndicator(data);
                        break;
                }
            }
            
            addMessage(data) {
                const messageDiv = document.createElement('div');
                messageDiv.className = `message ${data.sender.id == this.userId ? 'own' : ''}`;
                
                const isOwn = data.sender.id == this.userId;
                const senderName = isOwn ? 'Vous' : `${data.sender.prenom} ${data.sender.nom}`;
                const timestamp = new Date(data.timestamp).toLocaleTimeString('fr-FR', {
                    hour: '2-digit',
                    minute: '2-digit'
                });
                
                messageDiv.innerHTML = `
                    <div class="message-content">
                        <div class="message-text">${this.escapeHtml(data.content)}</div>
                        <div class="message-info">
                            ${senderName} - ${timestamp}
                        </div>
                    </div>
                `;
                
                this.chatMessages.appendChild(messageDiv);
                this.scrollToBottom();
                
                // Notification si ce n'est pas notre message
                if (!isOwn) {
                    this.showNotification(data.content, senderName);
                }
            }
            
            handleTypingIndicator(data) {
                if (data.userId === this.userId) return;
                
                if (data.isTyping) {
                    this.typingIndicator.textContent = `${data.userName || 'Quelqu\'un'} tape...`;
                    this.typingIndicator.style.display = 'block';
                } else {
                    this.typingIndicator.style.display = 'none';
                }
            }
            
            scrollToBottom() {
                this.chatMessages.scrollTop = this.chatMessages.scrollHeight;
            }
            
            escapeHtml(text) {
                const div = document.createElement('div');
                div.textContent = text;
                return div.innerHTML;
            }
            
            showNotification(content, senderName) {
                if (Notification.permission === 'granted') {
                    new Notification(`Nouveau message de ${senderName}`, {
                        body: content,
                        icon: '/images/logo.png'
                    });
                }
            }
        }
        
        // Demander la permission pour les notifications
        if ('Notification' in window) {
            Notification.requestPermission();
        }
        
        // Initialiser le chat quand la page est chargée
        document.addEventListener('DOMContentLoaded', () => {
            new ChatManager();
        });
    </script>
{% endblock %}
