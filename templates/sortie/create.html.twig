{% extends 'base.html.twig' %}

{% block title %}Créer une sortie{% endblock %}

{% block body %}

    {% include 'components/_header.html.twig' %}

    <div class="form-container">
        <h1 class="form-title">Créer une sortie</h1>
        
        <div class="form-card">
            {{ form_start(sortieForm, {'attr': {'class': 'space-y-6'}}) }}
                
                <div class="form-group">
                    {{ form_label(sortieForm.nomSortie, null, {'label_attr': {'class': 'form-label form-required'}}) }}
                    {{ form_widget(sortieForm.nomSortie, {'attr': {'class': 'form-input', 'placeholder': 'Ex: Soirée cinéma, Randonnée en forêt...'}}) }}
                    {{ form_errors(sortieForm.nomSortie) }}
                </div>

                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div class="form-group">
                        {{ form_label(sortieForm.dateDebut, null, {'label_attr': {'class': 'form-label form-required'}}) }}
                        {{ form_widget(sortieForm.dateDebut, {'attr': {'class': 'form-input'}}) }}
                        {{ form_errors(sortieForm.dateDebut) }}
                    </div>

                    <div class="form-group">
                        {{ form_label(sortieForm.duree, null, {'label_attr': {'class': 'form-label form-required'}}) }}
                        {{ form_widget(sortieForm.duree, {'attr': {'class': 'form-input', 'placeholder': 'Durée en minutes'}}) }}
                        {{ form_errors(sortieForm.duree) }}
                        <p class="form-help">Durée prévue de la sortie en minutes</p>
                    </div>
                </div>

                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div class="form-group">
                        {{ form_label(sortieForm.dateCloture, null, {'label_attr': {'class': 'form-label form-required'}}) }}
                        {{ form_widget(sortieForm.dateCloture, {'attr': {'class': 'form-input'}}) }}
                        {{ form_errors(sortieForm.dateCloture) }}
                        <p class="form-help">Date limite pour s'inscrire</p>
                    </div>

                    <div class="form-group">
                        {{ form_label(sortieForm.nbInscriptionMax, null, {'label_attr': {'class': 'form-label form-required'}}) }}
                        {{ form_widget(sortieForm.nbInscriptionMax, {'attr': {'class': 'form-input', 'placeholder': 'Nombre maximum de participants'}}) }}
                        {{ form_errors(sortieForm.nbInscriptionMax) }}
                    </div>
                </div>

                <div class="form-group">
                    {{ form_label(sortieForm.descriptionInfos, null, {'label_attr': {'class': 'form-label'}}) }}
                    {{ form_widget(sortieForm.descriptionInfos, {'attr': {'class': 'form-textarea', 'placeholder': 'Décrivez votre sortie : lieu de rendez-vous, matériel à apporter, programme prévu...', 'rows': '4'}}) }}
                    {{ form_errors(sortieForm.descriptionInfos) }}
                </div>

                {# Champ adresse avec suggestions stylé #}
                <div class="form-group">
                    <div style="position: relative;">
                        {{ form_label(sortieForm.adresse, null, {'label_attr': {'class': 'form-label form-required'}}) }}
                        {{ form_widget(sortieForm.adresse, {'attr': {'class': 'form-input', 'placeholder': 'Tapez l\'adresse du lieu de la sortie'}}) }}
                        <ul id="adresse-suggestions" class="address-suggestions" style="display: none;"></ul>
                        {{ form_errors(sortieForm.adresse) }}
                        <p class="form-help">Commencez à taper pour voir les suggestions d'adresses</p>
                    </div>
                </div>

                {# Champs cachés #}
                {{ form_widget(sortieForm.adresse_full, {'attr': {'class': 'hidden'}}) }}
                {{ form_widget(sortieForm.rue, {'attr': {'class': 'hidden'}}) }}
                {{ form_widget(sortieForm.latitude, {'attr': {'class': 'hidden'}}) }}
                {{ form_widget(sortieForm.longitude, {'attr': {'class': 'hidden'}}) }}
                {{ form_widget(sortieForm.ville_nom, {'attr': {'class': 'hidden'}}) }}
                {{ form_widget(sortieForm.code_postal, {'attr': {'class': 'hidden'}}) }}

                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div class="form-group">
                        {{ form_label(sortieForm.statut, null, {'label_attr': {'class': 'form-label form-required'}}) }}
                        {{ form_widget(sortieForm.statut, {'attr': {'class': 'form-select'}}) }}
                        {{ form_errors(sortieForm.statut) }}
                    </div>

                    <div class="form-group">
                        {{ form_label(sortieForm.campus, null, {'label_attr': {'class': 'form-label form-required'}}) }}
                        {{ form_widget(sortieForm.campus, {'attr': {'class': 'form-select'}}) }}
                        {{ form_errors(sortieForm.campus) }}
                    </div>
                </div>

            <div class="form-group">
                {{ form_label(sortieForm.categorie, null, {'label_attr': {'class': 'form-label'}}) }}
                {{ form_widget(sortieForm.categorie, {'attr': {'class': 'form-select'}}) }}
                {{ form_errors(sortieForm.categorie) }}
            </div>

            <div class="form-actions">
                    <button type="submit" class="btn-primary">Créer la sortie</button>
                    <a href="{{ path('app_sortie_list') }}" class="btn-secondary">Annuler</a>
                </div>
                
            {{ form_end(sortieForm) }}
        </div>
    </div>

    <script>
        (function() {
            const input = document.querySelector('[data-address-input="true"]');
            const list = document.getElementById('adresse-suggestions');

            if (!input || !list) return;

            let controller;

            function clearSuggestions() {
                list.innerHTML = '';
                list.style.display = 'none';
            }

            function selectFeature(f) {
                // API Adresse: lon,lat
                const [lon, lat] = f.geometry.coordinates;
                const props = f.properties;

                // Récupération des champs du formulaire
                const form = input.closest('form');
                form.querySelector('[name$="[adresse_full]"]').value = props.label || '';
                form.querySelector('[name$="[rue]"]').value = props.name || props.street || props.label || '';
                form.querySelector('[name$="[latitude]"]').value = lat || '';
                form.querySelector('[name$="[longitude]"]').value = lon || '';
                form.querySelector('[name$="[ville_nom]"]').value = props.city || props.name || '';
                form.querySelector('[name$="[code_postal]"]').value = props.postcode || '';

                // Affiche le choix dans l'input principal
                input.value = props.label || '';
                clearSuggestions();
            }

            async function fetchSuggestions(q) {
                const url = 'https://api-adresse.data.gouv.fr/search/?q=' + encodeURIComponent(q) + '&limit=5';
                if (controller) controller.abort();
                controller = new AbortController();
                const resp = await fetch(url, { signal: controller.signal });
                if (!resp.ok) return [];
                const data = await resp.json();
                return data.features || [];
            }

            function renderSuggestions(features) {
                clearSuggestions();
                if (!features.length) return;

                features.forEach(f => {
                    const li = document.createElement('li');
                    li.textContent = f.properties.label;
                    li.className = 'address-suggestion-item';
                    li.addEventListener('mousedown', e => {
                        e.preventDefault();
                        selectFeature(f);
                    });
                    list.appendChild(li);
                });

                list.style.display = 'block';
            }

            let debounce;
            input.addEventListener('input', async () => {
                const q = input.value.trim();
                if (!q) {
                    clearSuggestions();
                    return;
                }
                clearTimeout(debounce);
                debounce = setTimeout(async () => {
                    try {
                        const features = await fetchSuggestions(q);
                        renderSuggestions(features);
                    } catch (_) { /* ignore */ }
                }, 250);
            });

            document.addEventListener('click', (e) => {
                if (!list.contains(e.target) && e.target !== input) {
                    clearSuggestions();
                }
            });
        })();
    </script>

    {% include 'components/_footer.html.twig' %}

{% endblock %}